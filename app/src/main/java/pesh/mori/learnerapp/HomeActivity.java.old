package pesh.mori.learnerapp;

import android.app.ProgressDialog;
import android.app.SearchManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.support.design.widget.NavigationView;
import android.support.design.widget.Snackbar;
import android.support.v4.content.IntentCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.EditorInfo;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.SearchView;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import android.widget.Toast;

import com.firebase.ui.database.FirebaseRecyclerAdapter;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.squareup.picasso.Picasso;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import de.hdodenhof.circleimageview.CircleImageView;

/**
 * Created by MORIAMA on 01/01/2018.
 */

public class HomeActivity extends AppCompatActivity  {

    private Button diy;
    private Button school;
    private TextView preference;
    private Menu menu;
    private DrawerLayout mDrawerlayout;
    private ActionBarDrawerToggle mToggle;

    private RecyclerView mRecycler;

    private RecyclerView mRecycler2;

    private RecyclerView mRecycler3;

    private DatabaseReference mFiles;
    private FirebaseAuth mAuth;
    private StorageReference mStorage;

    private Query mParent;

    private static CustomProgressBar progressBar = new CustomProgressBar();

    private static int TIME_OUT = 2000;

    private static int TIME_OUT2 = 5000;

    private DatabaseReference mUsers;

    private CircleImageView headerImage;
    private TextView txtName,txtTokens;

    private ProgressDialog mProgress;

    private Query mSearch;

    private StorageReference sStorage;

    public HomeActivity() {
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_home);

        HomeActivity homeActivity = new HomeActivity();
        homeActivity.checkMaintenanceStatus();

        mAuth = FirebaseAuth.getInstance();
        if (mAuth.getCurrentUser() == null) {
            mAuth.signOut();
            Intent loginIntent = new Intent(HomeActivity.this, LoginActivity.class);
            loginIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
            startActivity(loginIntent);
            finish();
        }

        mProgress = new ProgressDialog(this);

        mDrawerlayout = (DrawerLayout) findViewById(R.id.drawer);
        mToggle = new ActionBarDrawerToggle(this, mDrawerlayout, R.string.open, R.string.close);
        mDrawerlayout.addDrawerListener(mToggle);
        mToggle.syncState();
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        diy = (Button) findViewById(R.id.diy);
        school = (Button) findViewById(R.id.school);

        mFiles = FirebaseDatabase.getInstance().getReference().child("Files");
        mFiles.keepSynced(true);
        mStorage = FirebaseStorage.getInstance().getReference().child("Files");
        mParent = FirebaseDatabase.getInstance().getReference().child("Files");
//
//
//
        mRecycler = (RecyclerView) findViewById(R.id.layout_recycler_mydownloads);
        LinearLayoutManager layoutManager = new LinearLayoutManager(this);
        layoutManager.setReverseLayout(true);
        layoutManager.setStackFromEnd(true);
        mRecycler.setHasFixedSize(true);
        mRecycler.setLayoutManager(layoutManager);

        mRecycler2 = (RecyclerView) findViewById(R.id.layout_recycler_mydownload);
        mRecycler2.setHasFixedSize(true);
        LinearLayoutManager layoutManager2 = new LinearLayoutManager(this);
        layoutManager2.setReverseLayout(true);
        layoutManager2.setStackFromEnd(true);
        mRecycler2.setLayoutManager(layoutManager2);

        mRecycler3 = (RecyclerView) findViewById(R.id.layout_recycler_mydownloa);
        mRecycler3.setHasFixedSize(true);
        LinearLayoutManager layoutManager3 = new LinearLayoutManager(this);
        layoutManager3.setReverseLayout(true);
        layoutManager3.setStackFromEnd(true);
        mRecycler3.setLayoutManager(layoutManager3);

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        //navigationView.setNavigationItemSelectedListener((NavigationView.OnNavigationItemSelectedListener) this);

        final TextView txtName = (TextView) navigationView.getHeaderView(0).findViewById(R.id.txt_header_name);


        sStorage = FirebaseStorage.getInstance().getReference().child("Users").child(mAuth.getCurrentUser().getUid());
        mUsers = FirebaseDatabase.getInstance().getReference().child("Users").child(mAuth.getCurrentUser().getUid());
        mUsers.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                txtName.setText("Hi there!  " +String.valueOf(dataSnapshot.child("fname").getValue()));
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });


        executeCommand();


        FirebaseRecyclerAdapter<File, mydownloads.DownloadsViewHolder> firebaseRecyclerAdapter = new FirebaseRecyclerAdapter<File, mydownloads.DownloadsViewHolder>(
                File.class,
                R.layout.card_mydownloadss,
                mydownloads.DownloadsViewHolder.class,
                mFiles.orderByChild("timestamp").limitToLast(5)
        ) {
            @Override
            protected void populateViewHolder(final mydownloads.DownloadsViewHolder viewHolder, File model, int position) {
                final String fileKey = getRef(position).getKey();

                mFiles.addValueEventListener(new ValueEventListener() {
                    @Override
                    public void onDataChange(DataSnapshot dataSnapshot) {
                        viewHolder.setTitle(String.valueOf(dataSnapshot.child(fileKey).child("title").getValue()));
                        viewHolder.setTimestamp(String.valueOf(dataSnapshot.child(fileKey).child("timestamp").getValue()));
                        String file_type = String.valueOf(dataSnapshot.child(fileKey).child("file_type").getValue());
                        if (file_type.equals("audio")) {
                            viewHolder.setAudioImage();
                        } else if (file_type.equals("video")) {
                            viewHolder.setVideoImage();
                        } else if (file_type.equals("image")) {
                            viewHolder.setImageImage();
                        }
                        viewHolder.mView.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View view) {
                                checkOwnershipStatus(fileKey);
                            }
                        });
                    }

                    @Override
                    public void onCancelled(DatabaseError databaseError) {

                    }
                });
            }
        };
        mRecycler.setAdapter(firebaseRecyclerAdapter);



        FirebaseRecyclerAdapter<File, mydownloads.DownloadsViewHolder> firebaseRecyclerAdapter2 = new FirebaseRecyclerAdapter<File, mydownloads.DownloadsViewHolder>(
                File.class,
                R.layout.card_mydownloadss,
                mydownloads.DownloadsViewHolder.class,
                mFiles.orderByChild("timestamp").limitToFirst(3)
        ) {
            @Override
            protected void populateViewHolder(final mydownloads.DownloadsViewHolder viewHolder, File model, int position) {
                final String fileKey = getRef(position).getKey();

                mFiles.addValueEventListener(new ValueEventListener() {
                    @Override
                    public void onDataChange(DataSnapshot dataSnapshot) {
                        viewHolder.setTitle(String.valueOf(dataSnapshot.child(fileKey).child("title").getValue()));
                        viewHolder.setTimestamp(String.valueOf(dataSnapshot.child(fileKey).child("timestamp").getValue()));
                        String file_type = String.valueOf(dataSnapshot.child(fileKey).child("file_type").getValue());
                        if (file_type.equals("audio")) {
                            viewHolder.setAudioImage();
                        } else if (file_type.equals("video")) {
                            viewHolder.setVideoImage();
                        } else if (file_type.equals("image")) {
                            viewHolder.setImageImage();
                        }
                        viewHolder.mView.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View view) {
                                checkOwnershipStatus(fileKey);
                            }
                        });
                    }

                    @Override
                    public void onCancelled(DatabaseError databaseError) {

                    }
                });
            }
        };
        mRecycler2.setAdapter(firebaseRecyclerAdapter2);

        FirebaseRecyclerAdapter<File, mydownloads.DownloadsViewHolder> firebaseRecyclerAdapter3 = new FirebaseRecyclerAdapter<File, mydownloads.DownloadsViewHolder>(
                File.class,
                R.layout.card_mydownloadss,
                mydownloads.DownloadsViewHolder.class,
                mFiles.orderByChild("timestamp").limitToLast(2)
        ) {
            @Override
            protected void populateViewHolder(final mydownloads.DownloadsViewHolder viewHolder, File model, int position) {
                final String fileKey = getRef(position).getKey();

                mFiles.addValueEventListener(new ValueEventListener() {
                    @Override
                    public void onDataChange(DataSnapshot dataSnapshot) {
                        viewHolder.setTitle(String.valueOf(dataSnapshot.child(fileKey).child("title").getValue()));
                        viewHolder.setTimestamp(String.valueOf(dataSnapshot.child(fileKey).child("timestamp").getValue()));
                        String file_type = String.valueOf(dataSnapshot.child(fileKey).child("file_type").getValue());
                        if (file_type.equals("audio")) {
                            viewHolder.setAudioImage();
                        } else if (file_type.equals("video")) {
                            viewHolder.setVideoImage();
                        } else if (file_type.equals("image")) {
                            viewHolder.setImageImage();
                        }
                        viewHolder.mView.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View view) {
                                checkOwnershipStatus(fileKey);
                            }
                        });
                    }

                    @Override
                    public void onCancelled(DatabaseError databaseError) {

                    }
                });
            }
        };
        mRecycler3.setAdapter(firebaseRecyclerAdapter3);
    }
//
//
//

//
//


//        final NavigationView navigationView = (NavigationView)findViewById(R.id.nav_home_activity);
//        navigationView.bringToFront();
//        navigationView.setNavigationItemSelectedListener((NavigationView.OnNavigationItemSelectedListener) getApplicationContext());
//        headerImage = navigationView.getHeaderView(0).findViewById(R.id.img_main_header_profile);
//        txtName = navigationView.getHeaderView(0).findViewById(R.id.txt_header_name);
//        txtTokens = navigationView.getHeaderView(0).findViewById(R.id.txt_header_tokens);
//        mUsers = FirebaseDatabase.getInstance().getReference().child("Users").child(mAuth.getCurrentUser().getUid());
//        mUsers.addListenerForSingleValueEvent(new ValueEventListener() {
//            @Override
//            public void onDataChange(DataSnapshot dataSnapshot) {
//                String profilePicture = String.valueOf(dataSnapshot.child("profile_picture").getValue());
//                Picasso.with(getApplicationContext()).load(profilePicture).into(headerImage);
//                txtName.setText(String.valueOf(dataSnapshot.child("fname")+" "+dataSnapshot.child("lname")));
//                FirebaseDatabase.getInstance().getReference().child("Tokens").child(mAuth.getCurrentUser().getUid()).addListenerForSingleValueEvent(new ValueEventListener() {
//                    @Override
//                    public void onDataChange(DataSnapshot dataSnapshot) {
//                        txtTokens.setText(String.valueOf(dataSnapshot.child("balance").getValue()));
//                    }
//
//                    @Override
//                    public void onCancelled(DatabaseError databaseError) {
//
//                    }
//                });
//            }
//
//            @Override
//            public void onCancelled(DatabaseError databaseError) {
//
//            }
//        });

    public void checkOwnershipStatus(final String key){
        FirebaseDatabase.getInstance().getReference().child("Files").child(key).addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                String owners = String.valueOf(dataSnapshot.child("owners").getValue());
                String itemPrice = String.valueOf(dataSnapshot.child("price").getValue());
                String author = String.valueOf(dataSnapshot.child("author").getValue());
                Double price = Double.parseDouble(itemPrice);
                List<String> listOwners = Arrays.asList(owners.split("\\s*,\\s*"));
                if (!listOwners.contains(mAuth.getCurrentUser().getUid()) && price>0 && !author.equals(mAuth.getCurrentUser().getUid())){
                    Intent transactionsIntent = new Intent(getApplicationContext(),TransactionsActivity.class);
                    transactionsIntent.putExtra("file_key",key);
                    transactionsIntent.putExtra("outgoing_intent","mydownloads");
                    transactionsIntent.putExtra("item_price",itemPrice);
                    startActivity(transactionsIntent);
                } else if (listOwners.contains(mAuth.getCurrentUser().getUid()) || author.equals(mAuth.getCurrentUser().getUid())){
                    Intent viewFileIntent = new Intent(getApplicationContext(),ViewFileActivity.class);
                    viewFileIntent.putExtra("file_key",key);
                    startActivity(viewFileIntent);
                }
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.search, menu);

        SearchManager searchManager = (SearchManager) getSystemService(Context.SEARCH_SERVICE);
        SearchView searchView = (SearchView) menu.findItem(R.id.search).getActionView();

        if (null != searchView){
            searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));
            searchView.setIconifiedByDefault(false);
        }

        SearchView.OnQueryTextListener queryTextListener = new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(final String txtSearch) {

                mProgress.setCanceledOnTouchOutside(false);
                mProgress.setMessage("Fetching results...");
                mProgress.show();
                final Query mParent = FirebaseDatabase.getInstance().getReference().child("Files"); //upper child needed here

                mParent.addValueEventListener(new ValueEventListener() {
                    @Override
                    public void onDataChange(DataSnapshot dataSnapshot) {
                        mSearch = FirebaseDatabase.getInstance().getReference().child("Files");
                        mSearch.orderByChild("title").startAt(txtSearch).endAt(txtSearch+"\uf8ff").addValueEventListener(new ValueEventListener() {
                            @Override
                            public void onDataChange(DataSnapshot dataSnapshot) {
                                if (!dataSnapshot.exists()){
                                    mProgress.dismiss();
                                    Snackbar snackbar = Snackbar.make(findViewById(android.R.id.content), "No results found!", Snackbar.LENGTH_LONG);
                                    snackbar.show();
                                } else {
                                    mProgress.dismiss();
                                    Intent resultsActivity = new Intent(getApplicationContext(),DownloadsList.class);
                                    resultsActivity.putExtra("query",txtSearch);
                                    resultsActivity.putExtra("activityFrom","HomeActivity"); //added this section

                                    startActivity(resultsActivity);
                                }
                            }

                            @Override
                            public void onCancelled(DatabaseError databaseError) {

                            }
                        });
                    }

                    @Override
                    public void onCancelled(DatabaseError databaseError) {

                    }
                });






                return true;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                return true;
            }
        };

        searchView.setOnQueryTextListener(queryTextListener);

        return super.onCreateOptionsMenu(menu);



    }

    

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle item selection

        return mToggle.onOptionsItemSelected( item ) || super.onOptionsItemSelected( item );
    }

    public void doThis(MenuItem item){
        switch (item.getItemId()) {
            case R.id.buy:
                Intent intent1 = new Intent( this, TokensActivity.class );
                this.startActivity( intent1 );
        }
        switch (item.getItemId()) {
            case R.id.myfiles:
                Intent intent1 = new Intent( this, MyFilesActivity.class );
                this.startActivity( intent1 );

        }
        switch (item.getItemId()) {
            case R.id.social:
                Intent intent1 = new Intent( Intent.ACTION_VIEW, Uri.parse("http:moripesh.com"));
                this.startActivity( intent1 );

        }
        switch (item.getItemId()) {
            case R.id.messages:
                Intent intent1 = new Intent( this, MessagesActivity.class );
                this.startActivity( intent1 );

        }
        switch (item.getItemId()) {
            case R.id.logout:
                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);
                alertDialogBuilder.setTitle("Sign out?");
                alertDialogBuilder
                        .setCancelable(false)
                        .setPositiveButton("Yes",
                                new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int id) {
//                                        moveTaskToBack(true);
//                                        android.os.Process.killProcess(android.os.Process.myPid());
//                                        System.exit(1);
                                        mAuth.signOut();
                                        Intent loginIntent = new Intent(HomeActivity.this,LoginActivity.class);
                                        loginIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
                                        startActivity(loginIntent);
                                        finish();
                                    }
                                })

                        .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int id) {

                                dialog.cancel();
                            }
                        });

                AlertDialog alertDialog = alertDialogBuilder.create();
                alertDialog.show();
        }
        switch (item.getItemId()) {
            case R.id.settings:
                Intent intent1 = new Intent( this, SettingsActivity.class );
                this.startActivity( intent1 );
        }
        switch (item.getItemId()) {
            case R.id.report:
                Intent intent1 = new Intent( this, ReportActivity.class );
                this.startActivity( intent1 );
        }
        switch (item.getItemId()) {
            case R.id.pc:
                Intent intent1 = new Intent( this, MypcActivity.class );
                this.startActivity( intent1 );
        }

    }

    public void didTapButton(View view) { //something wrong with DIY, needs debugging...
        if (view==diy){
            Animation myanim = AnimationUtils.loadAnimation(this, R.anim.bounce3);
            diy.startAnimation(myanim);
            progressBar.show(this,"Accessing...");

            new Handler().postDelayed( new Runnable() {


                @Override
                public void run() {
                    //Toast.makeText(getApplicationContext(), "Learn and Earn", Toast.LENGTH_LONG).show();
                    Intent i = new Intent(HomeActivity.this,CategoryActivity.class);
                    startActivity(i);
                    progressBar.getDialog().dismiss();

                }
            }, TIME_OUT);
        }

    }

    public void TapButton(View view) {
        if (view==school){
            Animation myanim = AnimationUtils.loadAnimation(this, R.anim.bounce3);
            school.startAnimation(myanim);
            progressBar.show(this,"Accessing...");

            new Handler().postDelayed( new Runnable() {


                @Override
                public void run() {
                    //Toast.makeText(getApplicationContext(), "Learn and Earn", Toast.LENGTH_LONG).show();
                    Intent i = new Intent(HomeActivity.this,InstitutionActivity.class);
                    startActivity(i);
                    progressBar.getDialog().dismiss();

                }
            }, TIME_OUT);
        }

    }

//    public void TapButton(View view) {
//        progressBar.show(this,"Accessing...");
//        new Handler().postDelayed( new Runnable() {
//
//
//            @Override
//            public void run() {
//
//                Toast.makeText(getApplicationContext(), "Learn and Earn", Toast.LENGTH_LONG).show();
//                Intent i = new Intent(HomeActivity.this,InstitutionActivity.class);
//                startActivity(i);
//                progressBar.getDialog().dismiss();
//
//            }
//        }, TIME_OUT);
//
//    }

    public void doThis(View view) {
        startActivity(new Intent(getApplicationContext(), SettingsActivity.class));
    }

    public static class DownloadsViewHolder extends RecyclerView.ViewHolder{
        View mView;

        public DownloadsViewHolder(View itemView) {
            super(itemView);
            mView = itemView;
        }

        public void setTitle(String title){
            TextView txtTitle = (TextView)mView.findViewById(R.id.txt_title_downl) ;
            txtTitle.setText(title);
        }
        public void setTimestamp(String timestamp){
            TextView txtTime = (TextView)mView.findViewById(R.id.txt_time_downl);
            txtTime.setText(timestamp);
        }
        //        public void setImage(Context ctx,String image){
//            ImageView imgUpload = (ImageView)mView.findViewById(R.id.img_upload);
//            Picasso.with(ctx).load(image).into(imgUpload);
//        }
        public void setAudioImage(){
            ImageView imgUpload = (ImageView)mView.findViewById(R.id.img_downl);
            imgUpload.setImageResource(R.mipmap.audio_preview);
        }
        public void setVideoImage(){
            ImageView imgUpload = (ImageView)mView.findViewById(R.id.img_downl);
            imgUpload.setImageResource(R.mipmap.video_preview);
        }
        public void setImageImage(){
            ImageView imgUpload = (ImageView)mView.findViewById(R.id.img_downl);
            imgUpload.setImageResource(R.mipmap.image_preview);
        }
        public void setNull(){
            TextView txtEmpty = mView.findViewById(R.id.txt_upload_empty);
            txtEmpty.setText("No Files to Display");
        }
    }

    private boolean executeCommand() {
        System.out.println("executeCommand");
        Runtime runtime = Runtime.getRuntime();
        try {
            Process mIpAddrProcess = runtime.exec("/system/bin/ping -c 1 8.8.8.8");
            int mExitValue = mIpAddrProcess.waitFor();
            System.out.println(" mExitValue " + mExitValue);
            if (mExitValue == 0) {

                return true;

            } else {

                Snackbar snackbar = Snackbar.make(findViewById(android.R.id.content), "Network access unavailable!", Snackbar.LENGTH_LONG);
                snackbar.show();
            }
        } catch (InterruptedException ignore) {
            ignore.printStackTrace();
            System.out.println(" Exception:" + ignore);
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println(" Exception:" + e);
        }
        return false;
    }
}



